import os
from github import Github
from dotenv import load_dotenv
from openai import OpenAI
from pathlib import Path
from brain.db import init_db, save_to_history

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
g = Github(os.getenv("GITHUB_TOKEN"))
repo = g.get_user().get_repo(os.getenv("REPO_NAME"))

# –ü—É—Ç–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
PROMPTS_DIR = "autodev-bot/prompts"
AUTOGEN_DIR = "autodev-bot/autogen"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ .txt —Ñ–∞–π–ª–∞ –∏–∑ prompts
def get_latest_prompt():
    try:
        contents = repo.get_contents(PROMPTS_DIR)
        prompts = [f for f in contents if f.name.endswith(".txt")]
        if not prompts:
            raise Exception("‚ùå –ù–µ—Ç .txt —Ñ–∞–π–ª–æ–≤ –≤ prompts/")
        latest_prompt = sorted(prompts, key=lambda x: x.last_modified, reverse=True)[0]
        return latest_prompt.name, latest_prompt.decoded_content.decode()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ prompts –∏–∑ '{PROMPTS_DIR}':\n{e}")
        exit(1)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ OpenAI
def generate_code(prompt):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "gpt-4" –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–∞
            messages=[
                {"role": "system", "content": "–¢—ã –±–æ—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –ø–∏—à–µ—à—å –∫–æ–¥ –ø–æ –¢–ó."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI:")
        print(str(e))
        exit(1)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
def save_code_to_repo(filename, content):
    path = f"{AUTOGEN_DIR}/{filename}"
    try:
        existing_file = repo.get_contents(path)
        repo.update_file(path, f"Update {filename}", content, existing_file.sha)
        print(f"üîÅ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: {path}")
    except:
        repo.create_file(path, f"Create {filename}", content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {path}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ AutoDev –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:", os.getenv("REPO_NAME"))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    init_db()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º—Ç
    prompt_filename, prompt_text = get_latest_prompt()
    print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º—Ç–∞: {prompt_filename}")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
    generated_code = generate_code(prompt_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    save_to_history(prompt_text, generated_code)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    base_filename = prompt_filename.replace(".txt", "")

    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞ –ë–î ‚Äî —Ä–∞–∑–±–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ SQL –∏ Python
    if any(word in prompt_text.lower() for word in ["–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "sqlalchemy", "—Ç–∞–±–ª–∏—Ü—ã", "–º–æ–¥–µ–ª—å sqlalchemy"]):
        if "```sql" in generated_code and "```python" in generated_code:
            sql_part = generated_code.split("```sql")[1].split("```")[0].strip()
            py_part = generated_code.split("```python")[1].split("```")[0].strip()
        else:
            sql_part = ""
            py_part = generated_code

        save_code_to_repo(f"{base_filename}_models.py", py_part)
        if sql_part:
            save_code_to_repo(f"{base_filename}_schema.sql", sql_part)
    else:
        output_filename = f"{base_filename}.py"
        save_code_to_repo(output_filename, generated_code)

    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
# –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
# def save_to_history(prompt, result):
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute(
#         "INSERT INTO history (prompt, result) VALUES (?, ?)",
#         (prompt, result)
#     )
#     conn.commit()
#     conn.close()
#     return result
# def get_latest_prompt():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT prompt FROM history ORDER BY id DESC LIMIT 1")
#     result = cursor.fetchone()
#     conn.close()
#     return result[0] if result else None
# def get_history():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT prompt, result FROM history ORDER BY id DESC")
#     results = cursor.fetchall()
#     conn.close()
#     return results
# def clear_history():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("DELETE FROM history")
#     conn.commit()
#     conn.close()
# def get_all_prompts():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT prompt FROM history ORDER BY id DESC")
#     results = cursor.fetchall()
#     conn.close()
#     return [result[0] for result in results]
# def get_all_results():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT result FROM history ORDER BY id DESC")
#     results = cursor.fetchall()
#     conn.close()
#     return [result[0] for result in results]
# def get_all_history():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT * FROM history ORDER BY id DESC")
#     results = cursor.fetchall()
#     conn.close()
#     return results
# def delete_history_entry(entry_id):
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("DELETE FROM history WHERE id = ?", (entry_id,))
#     conn.commit()
#     conn.close()
# def get_entry_by_id(entry_id):
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT * FROM history WHERE id = ?", (entry_id,))
#     result = cursor.fetchone()
#     conn.close()
#     return result
# def get_all_history():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT * FROM history ORDER BY id DESC")
#     results = cursor.fetchall()
#     conn.close()
#     return results
# def update_entry(entry_id, prompt, result):
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute(
#         "UPDATE history SET prompt = ?, result = ? WHERE id = ?",
#         (prompt, result, entry_id)
#     )
#     conn.commit()
#     conn.close()
# def get_all_entries():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT * FROM history")
#     results = cursor.fetchall()
#     conn.close()
#     return results
# def get_all_history():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT * FROM history ORDER BY id DESC")
#     results = cursor.fetchall()
#     conn.close()
#     return results
# def update_entry(entry_id, prompt, result):
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute(
#         "UPDATE history SET prompt = ?, result = ? WHERE id = ?",
#         (prompt, result, entry_id)
#     )
#     conn.commit()
#     conn.close()
# def get_all_entries():
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#     cursor.execute("SELECT * FROM history")